#!/usr/bin/env python

"""
Generate client and server CURVE certificate files then move them into the
appropriate store directory, private_keys or public_keys. The certificates
generated by this script are used by the stonehouse and ironhouse examples.
In practice this would be done by hand or some out-of-band process.
Author: Chris Laws
https://github.com/zeromq/pyzmq/blob/master/examples/security/generate_certificates.py
"""

import os
import shutil
import zmq.auth
from argparse import ArgumentParser

CERTS_PATH = os.getenv('ZYRE_CERTS_PATH', os.path.expanduser('~/.curve'))


def generate_certificates(base_dir):
    ''' Generate client and server CURVE certificate files'''
    if not os.path.exists(base_dir):
        os.mkdir(base_dir)

    keys_dir = os.path.join(base_dir, 'certificates')
    public_keys_dir = os.path.join(base_dir, 'public_keys')
    secret_keys_dir = os.path.join(base_dir, 'private_keys')

    # Create directories for certificates, remove old content if necessary
    for d in [keys_dir, public_keys_dir, secret_keys_dir]:
        if os.path.exists(d):
            shutil.rmtree(d)
        os.mkdir(d)

    # create new keys in certificates dir
    server_public_file, server_secret_file = zmq.auth.create_certificates(keys_dir, "server")
    #client_public_file, client_secret_file = zmq.auth.create_certificates(keys_dir, "client")

    # move public keys to appropriate directory
    for key_file in os.listdir(keys_dir):
        if key_file.endswith(".key"):
            shutil.move(os.path.join(keys_dir, key_file),
                        os.path.join(public_keys_dir, '.'))

    # move secret keys to appropriate directory
    for key_file in os.listdir(keys_dir):
        if key_file.endswith(".key_secret"):
            shutil.move(os.path.join(keys_dir, key_file),
                        os.path.join(secret_keys_dir, '.'))


def main():
    if zmq.zmq_version_info() < (4,0):
        raise RuntimeError("Security is not supported in libzmq version < 4.0. libzmq version {0}".format(zmq.zmq_version()))

    p = ArgumentParser(add_help=False)
    p.add_argument('-d', '--debug', action="store_true")
    p.add_argument('-v', '--verbose', action="store_true")
    p.add_argument('--path', help='specify base path [default %(default)s]', default=CERTS_PATH)

    args = p.parse_args()
    #generate_certificates(args.path)

    print("Generated certs in: %s" % CERTS_PATH)


    certs = zmq.auth.load_certificates('/Users/wes/.curve/certificates')

    from pprint import pprint
    pprint(certs)

if __name__ == '__main__':
    main()
